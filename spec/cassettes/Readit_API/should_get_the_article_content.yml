---
http_interactions:
- request:
    method: get
    uri: https://www.readability.com/api/rest/v1/articles/eg60dxbv
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - ! '*/*'
      User-Agent:
      - OAuth gem v0.4.7
      Authorization:
      - OAuth oauth_consumer_key="<TOKENS>", oauth_nonce="dKfiGwmM5ibya8axWHHDTW3UH3dTQw3XE6Dyu4t9DwA",
        oauth_signature="c3Edm6p2D3Z6OEwLjhusArmGVh0%3D", oauth_signature_method="HMAC-SHA1",
        oauth_timestamp="1364436334", oauth_token="<TOKENS>", oauth_version="1.0"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 28 Mar 2013 02:05:34 GMT
      P3p:
      - CP='Legacy Only. Go to https://readability.com/about/terms/ for full terms.'
      Server:
      - nginx/1.2.6
      Set-Cookie:
      - readabilityToken=4FCRyvwJt8enJ7LvesTWKphGwNRyT5h9B3t5KWfP; expires=Thu, 25-Apr-2013
        02:05:34 GMT; Max-Age=2419200; Path=/
      Vary:
      - Accept-Encoding
      - Authorization, Cookie
      Content-Length:
      - '22030'
      Connection:
      - keep-alive
    body:
      encoding: US-ASCII
      string: ! "{\n    \"direction\": \"ltr\",\n    \"next_page_href\": null,\n    \"author\":
        null,\n    \"url\": \"http://www.joezimjs.com/javascript/javascript-design-patterns-decorator/?utm_source=javascriptweekly&utm_medium=email\",\n
        \   \"lead_image_url\": \"http://www.joezimjs.com/wp-content/uploads/decorator_structure.png\",\n
        \   \"title\": \"JavaScript Design Patterns: Decorator\",\n    \"excerpt\":
        \"Today I&#x2019;d like to show another JavaScript Design Pattern: the Decorator,
        which is a way to add features to objects without subclassing or adding extra
        attributes. This post continues the&hellip;\",\n    \"domain\": \"www.joezimjs.com\",\n
        \   \"word_count\": 1351,\n    \"content\": \"<div><div class=\\\"entry-content\\\">\\n\\n\\t\\t<p>Today
        I&#x2019;d like to show another JavaScript Design Pattern: the Decorator,
        which is a way to add features to objects without subclassing or adding extra
        attributes. This post continues the JavaScript Design Patterns series that
        I started several months ago. If you&#x2019;re new to the JavaScript Design
        Patterns series that I&#x2019;m running here, you can find a list of the previous
        and upcoming posts in the series at the <a href=\\\"http://www.joezimjs.com/javascript/javascript-design-patterns-decorator/#series\\\">bottom
        of the post</a>.</p>\\n<h2>Back on Course with Tutorial Posts</h2>\\n<p>After
        the exciting launch of my new <a href=\\\"http://www.joezimjs.com/projects/publish-subscribe-jquery-plugin/\\\"
        title=\\\"JZ Publish/Subscribe Project Page\\\">jQuery plugin</a> it&#x2019;s
        been difficult to bring myself back to normal blogging and back to this series.
        If you don&#x2019;t know what I&#x2019;m talking about, then you should hop
        on over to the <a href=\\\"http://www.joezimjs.com/javascript/new-jquery-plugin-publish-subscribe/\\\"
        title=\\\"New jQuery Plugin: Publish/Subscribe\\\">plugin&#x2019;s announcement
        post</a> (when you&#x2019;re done reading this, of course). However, regardless
        of how this month started out, I&#x2019;ve decided to make a commitment to
        at least 2 &#x201C;tutorial&#x201D; posts per month. I put the word &#x201C;tutorial&#x201D;
        in quotes because I&#x2019;m not sure they can all be generally considered
        tutorials, but I&#x2019;m using the word to mean any post whose purpose is
        to teach, as opposed to announcements or news and the like.</p>\\n<h2>On with
        the Decorator Pattern</h2>\\n<p>Let&#x2019;s return to purpose of this post:
        learning about the decorator pattern. Like I said, this pattern permits us
        to add features to an object without needing to subclass it. Instead we &#x201C;decorate&#x201D;
        (wrap) it with another object with the same interface that has the one feature
        we&#x2019;re adding. To get a better idea of what I&#x2019;m talking about,
        let&#x2019;s first demonstrate how someone lacking knowledge of the decorator
        pattern would attempt this, especially if they&#x2019;re coming from a background
        of classical inheritance.</p>\\n<div class=\\\"geshi javascript\\\">\\n<ol><li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// Superclass</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"kw2\\\">var</span>
        Car = <span class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span>&#x2026;<span class=\\\"br0\\\">}</span>;</p>\\n</li>\\n\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// Subclasses
        with different features</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> CarWithPowerLocks = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span>&#x2026;<span
        class=\\\"br0\\\">}</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> CarWithPowerWindows = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span>&#x2026;<span
        class=\\\"br0\\\">}</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> CarWithPowerLocksAndPowerWindows = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span>&#x2026;<span
        class=\\\"br0\\\">}</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> CarWithAC = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span>&#x2026;<span
        class=\\\"br0\\\">}</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> CarWithACAndPowerLocks = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span>&#x2026;<span
        class=\\\"br0\\\">}</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> CarWithACAndPowerWindows = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span>&#x2026;<span
        class=\\\"br0\\\">}</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> CarWithACAndPowerLocksAndPowerWindows = <span
        class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span>
        <span class=\\\"br0\\\">{</span>&#x2026;<span class=\\\"br0\\\">}</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n\\n</li>\\n</ol></div>\\n<p>As you can see, every combination
        of features needs to be represented by a new &#x201C;class&#x201D;. This might
        be okay if you have only a couple features, but once you start growing the
        number of features, this becomes more and more of a nightmare. Of course,
        if you want to be a jerk, you can do this in an app and leave it for someone
        else to maintain, but I don&#x2019;t know how long you&#x2019;d go before
        being punched in the face if that programmer needs to add another feature
        (or 5 more!).</p>\\n<h2>How the Decorator Pattern can Help</h2>\\n<p>Thankfully
        the Decorator Pattern can make things considerably simpler for us and future
        maintainers of our code. First we&#x2019;ll create the base object that will
        be a <code>Car</code> with no cool features. This also sets up the interface
        that the decorators will use.</p>\\n<div class=\\\"geshi javascript\\\">\\n<ol><li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"kw2\\\">var</span>
        Car = <span class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; console.<span class=\\\"me1\\\">log</span><span
        class=\\\"br0\\\">(</span><span class=\\\"st0\\\">'Assemble: build frame,
        add core parts'</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n\\n</li>\\n\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"co1\\\">// The decorators will also need to implement these functions</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// to comply
        with Car's interface.</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">Car.<span
        class=\\\"me1\\\">prototype</span> = <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; start: <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; &#xA0; &#xA0; console.<span
        class=\\\"me1\\\">log</span><span class=\\\"br0\\\">(</span><span class=\\\"st0\\\">'The
        engine starts with roar!'</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0;
        &#xA0; drive: <span class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; &#xA0; &#xA0; console.<span
        class=\\\"me1\\\">log</span><span class=\\\"br0\\\">(</span><span class=\\\"st0\\\">'Away
        we go!'</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; getPrice: <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; &#xA0; &#xA0; <span
        class=\\\"kw1\\\">return</span> <span class=\\\"nu0\\\">11000.00</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n\\n</li>\\n<li class=\\\"li1\\\">\\n\\n</li>\\n</ol></div>\\n<p>Now
        we&#x2019;ll create the decorator &#x201C;class&#x201D; that each of the decorator
        will inherit from. You&#x2019;ll notice that each of the functions simply
        pass the call on to the <code>Car</code> that they&#x2019;re wrapping. In
        this case the only functions that will be overridden are <code>assemble</code>
        and <code>getPrice</code>.</p>\\n<div class=\\\"geshi javascript\\\">\\n<ol><li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// You need
        to pass in the Car (or CarDecorator) in order to</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// be able
        to add features to it.</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> CarDecorator = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span>car<span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; <span class=\\\"kw1\\\">this</span>.<span
        class=\\\"me1\\\">car</span> = car;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n\\n</li>\\n\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// CarDecorator
        is implementing the same interface</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">CarDecorator.<span class=\\\"me1\\\">prototype</span> =
        <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">&#xA0; &#xA0; start: <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; &#xA0; &#xA0; <span
        class=\\\"kw1\\\">this</span>.<span class=\\\"me1\\\">car</span>.<span class=\\\"me1\\\">start</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0;
        &#xA0; drive: <span class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; &#xA0; &#xA0; <span
        class=\\\"kw1\\\">this</span>.<span class=\\\"me1\\\">car</span>.<span class=\\\"me1\\\">drive</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0;
        &#xA0; getPrice: <span class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; &#xA0; &#xA0; <span
        class=\\\"kw1\\\">return</span> <span class=\\\"kw1\\\">this</span>.<span
        class=\\\"me1\\\">car</span>.<span class=\\\"me1\\\">getPrice</span><span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n\\n</li>\\n<li class=\\\"li1\\\">\\n\\n</li>\\n</ol></div>\\n<p>Next
        we create a decorator object for each feature and override the parent&#x2019;s
        functions whenever we want to add more or different functionality there.</p>\\n<div
        class=\\\"geshi javascript\\\">\\n<ol><li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> PowerLocksDecorator = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span>car<span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; <span class=\\\"co1\\\">//
        JavaScript's way of calling a parent class' constructor</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; CarDecorator.<span
        class=\\\"me1\\\">call</span><span class=\\\"br0\\\">(</span><span class=\\\"kw1\\\">this</span>,
        car<span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">&#xA0; &#xA0; console.<span class=\\\"me1\\\">log</span><span
        class=\\\"br0\\\">(</span><span class=\\\"st0\\\">'Assemble: add power locks'</span><span
        class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">PowerLocksDecorator.<span class=\\\"me1\\\">prototype</span>
        = <span class=\\\"kw2\\\">new</span> CarDecorator<span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">PowerLocksDecorator.<span
        class=\\\"me1\\\">prototype</span>.<span class=\\\"me1\\\">drive</span> =
        <span class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; <span class=\\\"co1\\\">//
        You can either do this</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0;
        &#xA0; <span class=\\\"kw1\\\">this</span>.<span class=\\\"me1\\\">car</span>.<span
        class=\\\"me1\\\">drive</span><span class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; <span class=\\\"co1\\\">//
        or you can call the parent's drive function:</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">&#xA0; &#xA0; <span class=\\\"co1\\\">// CarDecorator.prototype.drive.call(this);</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; console.<span class=\\\"me1\\\">log</span><span
        class=\\\"br0\\\">(</span><span class=\\\"st0\\\">'The doors automatically
        lock'</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n\\n</li>\\n\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"kw2\\\">var</span>
        PowerWindowsDecorator = <span class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span>car<span
        class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; CarDecorator.<span
        class=\\\"me1\\\">call</span><span class=\\\"br0\\\">(</span><span class=\\\"kw1\\\">this</span>,
        car<span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">&#xA0; &#xA0; console.<span class=\\\"me1\\\">log</span><span
        class=\\\"br0\\\">(</span><span class=\\\"st0\\\">'Assemble: add power windows'</span><span
        class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">PowerWindowsDecorator.<span class=\\\"me1\\\">prototype</span>
        = <span class=\\\"kw2\\\">new</span> CarDecorator<span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span>;</p>\\n</li>\\n\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> ACDecorator = <span class=\\\"kw2\\\">function</span><span
        class=\\\"br0\\\">(</span>car<span class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; CarDecorator.<span
        class=\\\"me1\\\">call</span><span class=\\\"br0\\\">(</span><span class=\\\"kw1\\\">this</span>,
        car<span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">&#xA0; &#xA0; console.<span class=\\\"me1\\\">log</span><span
        class=\\\"br0\\\">(</span><span class=\\\"st0\\\">'Assemble: add A/C unit'</span><span
        class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">ACDecorator.<span class=\\\"me1\\\">prototype</span>
        = <span class=\\\"kw2\\\">new</span> CarDecorator<span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">ACDecorator.<span
        class=\\\"me1\\\">prototype</span>.<span class=\\\"me1\\\">start</span> =
        <span class=\\\"kw2\\\">function</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span> <span class=\\\"br0\\\">{</span></p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0; &#xA0; <span class=\\\"kw1\\\">this</span>.<span
        class=\\\"me1\\\">car</span>.<span class=\\\"me1\\\">start</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">&#xA0;
        &#xA0; console.<span class=\\\"me1\\\">log</span><span class=\\\"br0\\\">(</span><span
        class=\\\"st0\\\">'The cool air starts blowing.'</span><span class=\\\"br0\\\">)</span>;</p>\\n</li>\\n<li
        class=\\\"li1\\\">\\n\\n</li>\\n</ol></div>\\n<p>Notice that we always call
        the same function on the wrapped object as well. This is somewhat similar
        to the way a <a href=\\\"http://www.joezimjs.com/javascript/javascript-design-patterns-composite/\\\"
        title=\\\"JavaScript Design Patterns: Composite\\\">composite</a> works, though
        the similarities between the two patterns pretty much end there. In this example,
        we always call the wrapped object&#x2019;s function first before adding in
        the new information from the decorator (if any exists for that function).
        This creates the desired effect of having the core functions executing first,
        \ but other applications might require different order, or possibly might
        not even call the wrapped object&#x2019;s function if the intention is to
        completely change the functionality rather than adding on to it.</p>\\n<p><img
        src=\\\"http://www.joezimjs.com/wp-content/uploads/decorator_structure.png\\\"
        alt=\\\"Structure of the Decorator Pattern\\\" title=\\\"Structure of the
        Decorator Pattern\\\" width=\\\"570\\\" class=\\\"alignnone size-full wp-image-351\\\"></p>\\n<h2>Seeing
        our JavaScript in Action</h2>\\n<p>So how do we use the code that we just
        spent this entire time making? Well the actual code is below, but maybe I
        should do a little explaining first. Of course, you&#x2019;re free to skip
        this and jump straight to the code if you think you&#x2019;ve got it down.</p>\\n<p>First
        we create a <code>Car</code> object. Then, we create the decorator for the
        feature we want to add onto it and pass the <code>Car</code> into its constructor.
        The object returned from the decorator&#x2019;s constructor is assigned back
        to the variable that previously held the <code>Car</code> object because since
        the decorators use the same interface, they too can be considered <code>Car</code>s.
        We keep adding more features until we&#x2019;re satisfied and then we have
        our desired car that we can do whatever we want with.</p>\\n<div class=\\\"geshi
        javascript\\\">\\n<ol><li class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span
        class=\\\"kw2\\\">var</span> car = <span class=\\\"kw2\\\">new</span> Car<span
        class=\\\"br0\\\">(</span><span class=\\\"br0\\\">)</span>; &#xA0; &#xA0;
        &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0;<span class=\\\"co1\\\">//
        log \\\"Assemble: build frame, add core parts\\\"</span></p>\\n</li>\\n\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// give
        the car some power windows</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">car = <span class=\\\"kw2\\\">new</span> PowerWindowDecorator<span
        class=\\\"br0\\\">(</span>car<span class=\\\"br0\\\">)</span>; &#xA0; &#xA0;<span
        class=\\\"co1\\\">// log \\\"Assemble: add power windows\\\"</span></p>\\n</li>\\n\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// now some
        power locks and A/C</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">car
        = <span class=\\\"kw2\\\">new</span> PowerLocksDecorator<span class=\\\"br0\\\">(</span>car<span
        class=\\\"br0\\\">)</span>; &#xA0; &#xA0; <span class=\\\"co1\\\">// log \\\"Assemble:
        add power locks\\\"</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p class=\\\"de1\\\">car
        = <span class=\\\"kw2\\\">new</span> ACDecorator<span class=\\\"br0\\\">(</span>car<span
        class=\\\"br0\\\">)</span>; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; <span
        class=\\\"co1\\\">// log \\\"Assemble: add A/C unit\\\"</span></p>\\n</li>\\n\\n<li
        class=\\\"li1\\\">\\n<p class=\\\"de1\\\"><span class=\\\"co1\\\">// let's
        start this bad boy up and take a drive!</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">car.<span class=\\\"me1\\\">start</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span>; <span class=\\\"co1\\\">// log 'The engine starts
        with roar!' and 'The cool air starts blowing.'</span></p>\\n</li>\\n<li class=\\\"li1\\\">\\n<p
        class=\\\"de1\\\">car.<span class=\\\"me1\\\">drive</span><span class=\\\"br0\\\">(</span><span
        class=\\\"br0\\\">)</span>; <span class=\\\"co1\\\">// log 'Away we go!' and
        'The doors automatically lock'</span></p>\\n</li>\\n</ol></div>\\n<h2>Concluding
        this Fiasco</h2>\\n<p>The Decorator proves to be a nice way of maintaining
        differentiating features for an object and definitely helps improve maintainability
        over the long haul. You may have noticed, though, that I didn&#x2019;t include
        any code to make sure that we didn&#x2019;t accidentally add the same feature
        more than once. Don&#x2019;t worry, the next post will give us a clean answer
        without having to change any of the code we&#x2019;ve already written. Adding
        checks into the decorators to accomplish would prove to be annoying.</p>\\n<p>If
        you&#x2019;ve got something to say about the Decorator Pattern, this post,
        or even just JavaScript in general, make your voice heard in the comments
        section below. I&#x2019;d love to hear it, even if you&#x2019;re just letting
        me know I&#x2019;m an idiot (just try to make it more constructive than &#x201C;you&#x2019;re
        an idiot&#x201D;). We all have to grow somehow. Also, I&#x2019;d greatly appreciate
        if you&#x2019;d use the social sharing buttons below to spread the word about
        this post. Little guys like me don&#x2019;t get big without some help. Happy
        Coding!</p>\\n<p id=\\\"series\\\">JavaScript Design Patterns series:</p>\\n<ol
        class=\\\"yarpp-posts\\\"><li><a href=\\\"http://www.joezimjs.com/javascript/javascript-design-patterns-adapter/\\\"
        rel=\\\"bookmark\\\" title=\\\"JavaScript Design Patterns: Adapter\\\">JavaScript
        Design Patterns: Adapter</a></li>\\n<li><a href=\\\"http://www.joezimjs.com/javascript/javascript-design-patterns-singleton/\\\"
        rel=\\\"bookmark\\\" title=\\\"JavaScript Design Patterns: Singleton\\\">JavaScript
        Design Patterns: Singleton</a></li>\\n<li><a href=\\\"http://www.joezimjs.com/javascript/javascript-design-patterns-composite/\\\"
        rel=\\\"bookmark\\\" title=\\\"JavaScript Design Patterns: Composite\\\">JavaScript
        Design Patterns: Composite</a></li>\\n<li><a href=\\\"http://www.joezimjs.com/javascript/javascript-design-patterns-bridge/\\\"
        rel=\\\"bookmark\\\" title=\\\"JavaScript Design Patterns: Bridge\\\">JavaScript
        Design Patterns: Bridge</a></li>\\n<li><a href=\\\"http://www.joezimjs.com/javascript/javascript-design-patterns-facade/\\\"
        rel=\\\"bookmark\\\" title=\\\"JavaScript Design Patterns: Facade\\\">JavaScript
        Design Patterns: Facade</a></li>\\n</ol><br class=\\\"clear\\\"></div>\\n\\n\\t</div>\",\n
        \   \"date_published\": null,\n    \"dek\": null,\n    \"processed\": true,\n
        \   \"content_size\": 20088,\n    \"short_url\": \"http://rdd.me/eg60dxbv\",\n
        \   \"id\": \"eg60dxbv\"\n}"
    http_version: 
  recorded_at: Thu, 28 Mar 2013 02:05:36 GMT
recorded_with: VCR 2.0.1
